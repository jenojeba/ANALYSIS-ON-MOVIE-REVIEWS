{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4604c9c8",
   "metadata": {
    "papermill": {
     "duration": 0.004186,
     "end_time": "2024-05-23T14:43:01.851572",
     "exception": false,
     "start_time": "2024-05-23T14:43:01.847386",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TASK 2: Analysis on movie reviews"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28d4055f",
   "metadata": {
    "papermill": {
     "duration": 0.003533,
     "end_time": "2024-05-23T14:43:01.859225",
     "exception": false,
     "start_time": "2024-05-23T14:43:01.855692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 1: Import Necessary Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ffc0bef8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:01.869441Z",
     "iopub.status.busy": "2024-05-23T14:43:01.868301Z",
     "iopub.status.idle": "2024-05-23T14:43:05.212677Z",
     "shell.execute_reply": "2024-05-23T14:43:05.210581Z"
    },
    "papermill": {
     "duration": 3.352315,
     "end_time": "2024-05-23T14:43:05.215359",
     "exception": false,
     "start_time": "2024-05-23T14:43:01.863044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "from nltk.corpus import stopwords\n",
    "import nltk\n",
    "\n",
    "nltk.download('stopwords')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "289c3e30",
   "metadata": {
    "papermill": {
     "duration": 0.003882,
     "end_time": "2024-05-23T14:43:05.223782",
     "exception": false,
     "start_time": "2024-05-23T14:43:05.219900",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2: Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7e64e51a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:05.235627Z",
     "iopub.status.busy": "2024-05-23T14:43:05.234881Z",
     "iopub.status.idle": "2024-05-23T14:43:16.810266Z",
     "shell.execute_reply": "2024-05-23T14:43:16.809054Z"
    },
    "papermill": {
     "duration": 11.584147,
     "end_time": "2024-05-23T14:43:16.812775",
     "exception": false,
     "start_time": "2024-05-23T14:43:05.228628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "df = pd.read_csv('/kaggle/input/imdb-movie-reviews/IMDB Dataset.csv')\n",
    "\n",
    "# Check for missing values\n",
    "df.isnull().sum()\n",
    "\n",
    "# Preprocess the text\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "def preprocess_text(text):\n",
    "    # Convert to lowercase\n",
    "    text = text.lower()\n",
    "    # Remove punctuation and non-alphabetic characters\n",
    "    text = ''.join([char for char in text if char.isalpha() or char.isspace()])\n",
    "    # Remove stopwords\n",
    "    text = ' '.join([word for word in text.split() if word not in stop_words])\n",
    "    return text\n",
    "\n",
    "df['review'] = df['review'].apply(preprocess_text)\n",
    "\n",
    "# Encode sentiment labels (positive = 1, negative = 0)\n",
    "df['sentiment'] = df['sentiment'].apply(lambda x: 1 if x == 'positive' else 0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89d14616",
   "metadata": {
    "papermill": {
     "duration": 0.003901,
     "end_time": "2024-05-23T14:43:16.820899",
     "exception": false,
     "start_time": "2024-05-23T14:43:16.816998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3: Split the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c54d9ea1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:16.831128Z",
     "iopub.status.busy": "2024-05-23T14:43:16.830679Z",
     "iopub.status.idle": "2024-05-23T14:43:16.848255Z",
     "shell.execute_reply": "2024-05-23T14:43:16.846940Z"
    },
    "papermill": {
     "duration": 0.026209,
     "end_time": "2024-05-23T14:43:16.851228",
     "exception": false,
     "start_time": "2024-05-23T14:43:16.825019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df['review']\n",
    "y = df['sentiment']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4c17085",
   "metadata": {
    "papermill": {
     "duration": 0.003894,
     "end_time": "2024-05-23T14:43:16.859317",
     "exception": false,
     "start_time": "2024-05-23T14:43:16.855423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 4: Transform Text Data to TF-IDF Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "88965633",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:16.869159Z",
     "iopub.status.busy": "2024-05-23T14:43:16.868691Z",
     "iopub.status.idle": "2024-05-23T14:43:23.517497Z",
     "shell.execute_reply": "2024-05-23T14:43:23.516298Z"
    },
    "papermill": {
     "duration": 6.656704,
     "end_time": "2024-05-23T14:43:23.520124",
     "exception": false,
     "start_time": "2024-05-23T14:43:16.863420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tfidf_vectorizer = TfidfVectorizer(max_features=5000)\n",
    "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
    "X_test_tfidf = tfidf_vectorizer.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0418468b",
   "metadata": {
    "papermill": {
     "duration": 0.003778,
     "end_time": "2024-05-23T14:43:23.528108",
     "exception": false,
     "start_time": "2024-05-23T14:43:23.524330",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 5: Train a Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "da902168",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:23.538432Z",
     "iopub.status.busy": "2024-05-23T14:43:23.537620Z",
     "iopub.status.idle": "2024-05-23T14:43:24.924311Z",
     "shell.execute_reply": "2024-05-23T14:43:24.923031Z"
    },
    "papermill": {
     "duration": 1.394748,
     "end_time": "2024-05-23T14:43:24.927023",
     "exception": false,
     "start_time": "2024-05-23T14:43:23.532275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=200)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=200)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=200)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression(max_iter=200)\n",
    "model.fit(X_train_tfidf, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "896b0cd9",
   "metadata": {
    "papermill": {
     "duration": 0.004853,
     "end_time": "2024-05-23T14:43:24.936601",
     "exception": false,
     "start_time": "2024-05-23T14:43:24.931748",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 6: Evaluate the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "18defdf1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:24.947447Z",
     "iopub.status.busy": "2024-05-23T14:43:24.947044Z",
     "iopub.status.idle": "2024-05-23T14:43:24.985512Z",
     "shell.execute_reply": "2024-05-23T14:43:24.984290Z"
    },
    "papermill": {
     "duration": 0.046895,
     "end_time": "2024-05-23T14:43:24.988148",
     "exception": false,
     "start_time": "2024-05-23T14:43:24.941253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.89\n",
      "Confusion Matrix:\n",
      "[[4334  627]\n",
      " [ 494 4545]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.87      0.89      4961\n",
      "           1       0.88      0.90      0.89      5039\n",
      "\n",
      "    accuracy                           0.89     10000\n",
      "   macro avg       0.89      0.89      0.89     10000\n",
      "weighted avg       0.89      0.89      0.89     10000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set\n",
    "y_pred = model.predict(X_test_tfidf)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy:.2f}')\n",
    "\n",
    "# Print confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print('Confusion Matrix:')\n",
    "print(conf_matrix)\n",
    "\n",
    "# Print classification report\n",
    "class_report = classification_report(y_test, y_pred)\n",
    "print('Classification Report:')\n",
    "print(class_report)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faa4f87c",
   "metadata": {
    "papermill": {
     "duration": 0.00487,
     "end_time": "2024-05-23T14:43:24.997596",
     "exception": false,
     "start_time": "2024-05-23T14:43:24.992726",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 7 : Plot the confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cc22e4e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-23T14:43:25.008833Z",
     "iopub.status.busy": "2024-05-23T14:43:25.008023Z",
     "iopub.status.idle": "2024-05-23T14:43:25.638592Z",
     "shell.execute_reply": "2024-05-23T14:43:25.637370Z"
    },
    "papermill": {
     "duration": 0.639091,
     "end_time": "2024-05-23T14:43:25.641312",
     "exception": false,
     "start_time": "2024-05-23T14:43:25.002221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot confusion matrix\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4815310,
     "sourceId": 8143731,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 27.565176,
   "end_time": "2024-05-23T14:43:26.369752",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-23T14:42:58.804576",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
